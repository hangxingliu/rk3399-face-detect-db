#!/usr/bin/env bash

SECONDS=0;

# get directory this script located in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )";
	SOURCE="$(readlink "$SOURCE")"; [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE";
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

LIB_SRC="$DIR/../src"
LIB_TARGET_DEBUG="$DIR/../build/debug"
LIB_TARGET_RELEASE="$DIR/../build/release"

TEST_SRC="$DIR/../test"
TEST_TARGET_DEBUG="$DIR/../build/test-debug"
TEST_TARGET_RELEASE="$DIR/../build/test-release"
TEST_EXECUTE_FILE_EXT="_unit.test";

GREEN="\x1b[1;32m"
RED="\x1b[1;31m"
BLUE="\x1b[1;34m"
RESET="\x1b[0m"
function usage() {
	echo '';
	echo '  Usage: ./scripts/build.sh <$Action> --[$BuildType] [--arm] [-j$N] -D[$CMAKE_VAR=$VAL]...';
	echo '';
	echo '  Action:';
	echo '    cmake [BuildType]     :  clean build folder and redo cmake command';
	echo '    build [BuildType]     :  build target files from make file generated by cmake';
	echo '    test [BuildType]      :  build unit test codes and execute each unit test';
	echo '    clean-all             :  just remove build folder';
	echo '';
	echo '  BuildType:';
	echo '    debug (in default), release, all';
	echo '  ';
	echo '  `--arm`` is same with `-DCMAKE_FOR_ARM=ON`';
	echo '  ';
	echo '  Examples:';
	echo '';
	echo '    ./scripts/build.sh cmake --all';
	echo '    ./scripts/build.sh build --debug -j8';
	echo '    ./scripts/build.sh test --debug --release --arm -DNoGUI=ON'
	echo '';
	exit 0;
}
function gotoDirectory() {
	if [[ -e "$1" ]]; then
		if [[ -d "$1" ]]; then
			pushd "$1";
		else
			fatal "\"$1\" is not a directory!";
		fi
	else
		mkdir -p "$1";
		if [[ "$?" == "0" ]]; then
			pushd "$1";
		else
			fatal "create directory \"$1\" failed!";
		fi
	fi
}
function exitWithTimer() { echo -e "exit with ${1} (${SECONDS} seconds elapsed)"; exit $1; }
function fatal() { echo -e "\n  ${RED}error: $1$RESET\n"; exitWithTimer 1; }
function finish() { echo -e "\n  ${GREEN}success: $1$RESET\n"; }
function removeIfExisted() {
	for f in "$@"; do
		if [[ -d "$f" ]]; then rm -rf "$f" || fatal "remove directory \"$f\" failed!"; fi
	done
}
function executeCMake() {
	# $1 BUILD_TYPE $2 SOURCE_FOLDER $3 IS_TEST_PROJ
	IS_TEST="";  if [[ -n "$3" ]]; then IS_TEST="(test)"; fi
	cmake -DCMAKE_BUILD_TYPE="$1" $CMAKE_OPTS "$2";
	[[ "$?" == "0" ]] && finish "cmake for $1$IS_TEST" || fatal "cmake for $1$IS_TEST failed!";
}
function executeMakeBuild() {
	# $1 BUILD_TYPE $2 IS_TEST_PROJ
	IS_TEST="";  if [[ -n "$2" ]]; then IS_TEST="(test)"; fi
	make -j$MAKE_J;
	[[ "$?" == "0" ]] && finish "building by make for $1$IS_TEST" ||
		fatal "building by make for $1$IS_TEST failed!";
}
function executeUnitTest() {
	TEST_FILE="$1";
	TEST_ALL=$(($TEST_ALL+1));
	TEST_NAME="${TEST_FILE%${TEST_EXECUTE_FILE_EXT}}";
	echo -e "${BLUE}[.] testing ${TEST_NAME} ...${RESET}";

	"./$TEST_FILE" # execute test binary file
	TEST_RESULT="$?";
	if [[ "$TEST_RESULT" == "0" ]]; then
		TEST_PASSED=$(($TEST_PASSED+1));
		echo -e "${GREEN}[~] passed!${RESET}";
	else
		echo -e "\n${RED}[-] test ${TEST_NAME} failed (exit with ${TEST_RESULT})${RESET}\n";
	fi
}
function resolveHeaderFiles() {
	bash ../../scripts/resolve-all-hpp.sh --quiet;
	RESULT_RESULT=$?;
	[[ "$RESULT_RESULT" == "0" ]] && finish "resolved (generated) header files!" ||
		fatal "resolve header files failed!";
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#   M a i n    >>>>>>>>>>>>>>>>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ACTION=""
BUILD_TYPE="";
MAKE_J="8";
CMAKE_OPTS="";
IS_ARM=0;
for opt in "$@"; do
	if [[ "$opt" == "--help" ]] || [[ "$opt" == "-h" ]] || [[ "$opt" == "help" ]]; then usage;
	elif [[ "$opt" == "--arm" ]]; then CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_FOR_ARM=ON";
	elif [[ "$opt" == -j* ]]; then MAKE_J="${opt#-j}";
	elif [[ "$opt" == "--debug" ]] || [[ "$opt" == "--release" ]] || [[ "$opt" == "--all" ]]; then
		_opt="${opt#--}";
		if [[ -z "$BUILD_TYPE" ]]; then BUILD_TYPE="${_opt}";
		else BUILD_TYPE=`echo -e "${BUILD_TYPE}\n${_opt}" | sort | uniq`;
			[[ `echo -e "${BUILD_TYPE}" | wc -l` == "2" ]] && BUILD_TYPE="all";
		fi
	elif [[ "$opt" == -D*=* ]]; then CMAKE_OPTS="${CMAKE_OPTS} $opt";
	elif [[ "$opt" == --* ]]; then fatal "unknown option '${opt}' (usage: --help)";
	elif [[ -n `echo "$opt" | awk '/^cmake$/||/^build$/||/^test$/||/^clean-all$/'` ]]; then ACTION="$opt";
	else fatal "unknown action: '${opt}' (usage: --help)";
	fi
done

[[ -n `echo "$CMAKE_OPTS" | grep "DCMAKE_FOR_ARM"` ]] && IS_ARM=1 || IS_ARM=0;
[[ -z "$ACTION" ]] && fatal "Action is missing! (usage: --help)";
if [[ -z "$BUILD_TYPE" ]]; then
	[[ "$ACTION" == "clean-all" ]] ||
		echo -e "${BLUE}info: Using default build type: debug (usage: --help)${RESET}";
	BUILD_TYPE="debug";
fi
echo -e "action    : $ACTION\nbuildType : $BUILD_TYPE\noptions   : -j$MAKE_J $CMAKE_OPTS";


# ===================================

if [[ "$ACTION" == "clean-all" ]]; then
	removeIfExisted "$LIB_TARGET_DEBUG" "$LIB_TARGET_RELEASE" \
		"$TEST_TARGET_DEBUG" "$TEST_TARGET_RELEASE";

	finish "cleaned all build target directories!";
	exitWithTimer 0;
fi


# =======================
#     Get target path
# =======================
TARGET_PATH="$LIB_TARGET_DEBUG"
if [[ "$BUILD_TYPE" == "release" ]]; then
	if [[ "$ACTION" == "test" ]]; then
		TARGET_PATH="$TEST_TARGET_RELEASE";
	else
		TARGET_PATH="$LIB_TARGET_RELEASE";
	fi
elif [[ "$ACTION" == "test" ]]; then
	TARGET_PATH="$TEST_TARGET_DEBUG";
fi


if [[ "$BUILD_TYPE" == "all" ]]; then
	"$SOURCE" "$ACTION" "--debug" -j$MAKE_J $CMAKE_OPTS &&
	"$SOURCE" "$ACTION" "--release" -j$MAKE_J $CMAKE_OPTS &&
		exitWithTimer 0 || exit 1;
fi

gotoDirectory "$TARGET_PATH";

if [[ "$ACTION" == "cmake" ]]; then
	resolveHeaderFiles;
	executeCMake $BUILD_TYPE $LIB_SRC;
	exitWithTimer 0;
fi

if [[ "$ACTION" == "build" ]]; then # include: `build` and `build-arm`
	resolveHeaderFiles;
	bash ../../scripts/gen-export-symbol-list.sh
	if [[ ! -f "CMakeCache.txt" ]]; then
		echo -e "[.] executing cmake ...";
		executeCMake $BUILD_TYPE $LIB_SRC;
	fi
	executeMakeBuild $BUILD_TYPE;
	exitWithTimer 0;
fi

if [[ "$ACTION" == "test" ]]; then
	bash ../../scripts/resolve-test-cmake.sh;
	resolveHeaderFiles;
	executeCMake $BUILD_TYPE $TEST_SRC "test";
	executeMakeBuild $BUILD_TYPE "test";

	TEST_ALL=0; TEST_PASSED=0;
	ls | grep "$TEST_EXECUTE_FILE_EXT$" |
		awk -vIS_ARM="$IS_ARM" 'IS_ARM || !/arm/ {print $0;} END {print "EOF";}' |
		while read TEST_FILE; do
			if [[ "$TEST_FILE" == "EOF" ]]; then
				echo -e "\n Test result: (Passed: ${TEST_PASSED} / All: ${TEST_ALL})\n";
				if [[ "$TEST_ALL" != "$TEST_PASSED" ]]; then
					fatal "Some test failed!";
				fi
				finish "All unit tests are passed";
			else
				executeUnitTest $TEST_FILE;
			fi
		done

	exitWithTimer $?;
fi

# <<<<<<<<<<<<<<<<<<<<<<<<<<
#   Main  <<<<<<<<<<<<<<<<<<
# <<<<<<<<<<<<<<<<<<<<<<<<<<

