#!/usr/bin/env bash

function help() {
	echo -e "";
	echo -e "  usage: ./scripts/gen-hpp-util.sh <options...>";
	echo -e "";
	echo -e "  options:";
	echo -e "    --input=<inputFile>         cpp source file input";
	echo -e "    --include=<includeFiles>    addon headers are included into target hpp file";
	echo -e "    --output=<outputFile>       header file output";
	echo -e "    --name=<headerName>         name of header file";
	echo -e "    --extern-c                  (optional)";
	echo -e "";
	echo -e "  example:";
	echo -e "    ./scripts/gen-hpp-util.sh --input=a.cc --input=b.cc --input=c.cc --output=index.hpp --name=INDEX_HPP";
	echo -e "";
	exit 0;
}
function fatal() { echo -e "\n  fatal: $1\n"; exit 1; }
function missing() { fatal "missing option \"$1\" (\"--help\" for more help)"; }


# parameters: $1: file.cc
function parse() {
	# ctags --list-fields  # get detailed _xformat
	# %{name} tag name
	# %K      kind of tag
	# %F:%n   input file:line
	# %{properties} %{signature}
	ctags -o - -x --_xformat="[%{C++.properties}] %{name} %K %F:%n %S ||| %C"\
		--kinds-C++=+p --language-force=C++ --extras=+q --fields-C++='*' "$1" |
		# function name starts with _ is private or anonymous or lambda
		awk '$3=="function" && !match($2, /^_/) && !match($1, /static/)' |
		awk -vfn="$1" 'BEGIN{
			print "//  ====================";
			print "//  @file " fn;
			print "//  ====================";
			print "";
		}{
			print "//  source: " $4;

			name=$2;

			$1="";$2="";$3="";$4="";
			i=index($0, " ||| ");
			if(!i) i=length($0)-1;
			body=substr($0,1,i-1);

			def=substr($0,i+5,length($0)-i);
			j=index(def, name);
			if(!j) j=length(def);
			prefix=substr(def, 1, j-1);

			gsub(/inline/, "", prefix); # remove inline in declaration

			gsub(/^\s*/, "", body); # trimLeft
			gsub(/\s\*\s/, "* ", body); # make pointer beautiful
			gsub(/,/, ", ", body); # make , beautiful
			gsub(/=(\w|\*|\&|\.)+/, "", body); # remove default value
			gsub(/\s+/, " ", body); # combine blank spaces

			line=prefix name body;
			gsub(/^\s+/, "", line);gsub(/\s+$/, "", line); #trim
			print line ";\n";
		}';
}
# parameters: $1: file1.cc\nfile2.cc\n
function parseMultiFiles() {
	echo -e "$1" | while read file; do
		[[ -z "$file" ]] && exit 0; # empty line is end
		parse "$file"
	done
}

INPUT="";
INCLUDE=""; # TODO
OUTPUT="";
NAME="";
EXTERNC="false";

for a in "$@"; do
	if [[ "$a" == "--help" ]] || [[ "$a" == "-h" ]]; then
		help;
	fi

	if [[ "$a" == --include=* ]]; then
		INCLUDE="${INCLUDE}#include \"${a#--include=}\"\n";
	elif [[ "$a" == --input=* ]]; then
		INPUT="${INPUT}${a#--input=}\n";
	elif [[ "$a" == --output=* ]]; then
		OUTPUT=${a#--output=};
	elif [[ "$a" == --name=* ]]; then
		NAME=${a#--name=};
	elif [[ "$a" == "--extern-c" ]]; then
		EXTERNC="true";
	fi
done

[[ -z "$INPUT" ]] && missing "--input";
[[ -z "$OUTPUT" ]] && missing "--output";
[[ -z "$NAME" ]] && missing "--name";

echo -e "$INPUT" | while read line; do
	[[ -z "$line" ]] && exit 0; # empty line is end
	[[ ! -f "$line" ]] && fatal " \"${line}\" is not existed!";
done || exit 1;

echo "[.] parsing ...";
FUNCTIONS=`parseMultiFiles "$INPUT"`;
if [[ "$?" == "0" ]]; then
	echo "[~] parse success!";
else
	fatal "parse failed!";
fi

echo "[.] write to file ...";
function out() { echo -e "$*" >> "$OUTPUT"; }
echo "" > "$OUTPUT";
out '// 888       888        d8888 8888888b.  888b    888 8888888 888b    888  .d8888b.   888 888 888'
out '// 888   o   888       d88888 888   Y88b 8888b   888   888   8888b   888 d88P  Y88b  888 888 888'
out '// 888  d8b  888      d88P888 888    888 88888b  888   888   88888b  888 888    888  888 888 888'
out '// 888 d888b 888     d88P 888 888   d88P 888Y88b 888   888   888Y88b 888 888         888 888 888'
out '// 888d88888b888    d88P  888 8888888P"  888 Y88b888   888   888 Y88b888 888  88888  888 888 888'
out '// 88888P Y88888   d88P   888 888 T88b   888  Y88888   888   888  Y88888 888    888  Y8P Y8P Y8P'
out '// 8888P   Y8888  d8888888888 888  T88b  888   Y8888   888   888   Y8888 Y88b  d88P   "   "   " '
out '// 888P     Y888 d88P     888 888   T88b 888    Y888 8888888 888    Y888  "Y8888P88  888 888 888'
out "// ";
out "// ";
out "// This header file is generated by script.";
out "// DON'T modify manually!";
out "// Generate time: $(date '+20%y/%m/%d %H:%M:%S')";
out "";
if [[ -n "$INCLUDE" ]]; then
	out "$INCLUDE";
fi
out "#ifndef $NAME";
out "#define $NAME 1";
out "";
if [[ "$EXTERNC" == "true" ]]; then
	out "#ifdef __cplusplus";
	out "extern \"C\" {";
	out "#endif";
	out "";
fi

out "$FUNCTIONS";

if [[ "$EXTERNC" == "true" ]]; then
	out "";
	out "#ifdef __cplusplus";
	out "}";
	out "#endif";
fi
out "";
out "#endif";

echo "[+] write to file success!";
